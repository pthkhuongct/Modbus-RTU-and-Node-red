{"version":3,"sources":["modbus-flex-connector.js"],"names":["module","exports","RED","install","mbBasics","require","internalDebugLog","nodes","registerType","config","this","name","ModbusFlexConnector","maxReconnectsPerMinute","emptyQueue","showStatusActivities","connection","verboseLogging","settings","verbose","server","setNodeStatusTo","node","registerForModbus","onConfigDone","msg","shouldShowStatus","actualServiceState","setNodeDefaultStatus","payload","statusText","emptyMsgOnFail","send","on","error","invalidPayloadIn","concat","JSON","stringify","emit","onConfigError"],"mappings":"AAWAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,iBAAA,EAGNC,EAAmBD,QAAQ,OAAO,EAAE,8BAA8B,EA0ExEH,EAAIK,MAAMC,aAAa,wBA3EvB,SAAyBC,GACzBP,EAAMI,MAAAA,WAAmBD,KAAAA,CAAQ,EAEjCK,KAAAC,KAASC,EAAAA,KACPV,KAAIK,uBAAuBE,EAAOI,wBAAA,EAClCH,KAAKC,WAAaF,EAAKK,WACvBJ,KAAKG,qBAAsBJ,EAAGA,qBAC9BC,KAAKI,WAAaL,EAAOK,WACzBJ,KAAKK,WAAAA,KAELL,KAAKM,iBAAiBV,EAEtBI,KAAKJ,eAAgBJ,EAAGI,SAAAA,QACxBI,KAAKO,OAAAA,EAAAA,MAAiBf,QAAIgB,EAASC,MAAO,EAC1C,IAAKC,EAAMV,KACXN,EAAUiB,gBAAO,UAAAC,CAAA,EACjBlB,KAASiB,SAGTX,KAAAU,OAAAG,kBAAAD,CAAA,EACAlB,EAAKgB,uBAAyBE,EAAKZ,KAAAU,MAAA,EAGnCE,EAAKE,aAAe,SAAUC,GAC5B,IAAMC,EAAmBJ,EAAKP,qBAC1BW,GACFtB,EAASiB,gBAAgB,cAAeC,CAAI,EAE1CI,GACFtB,EAASiB,gBAAgBX,KAAKU,OAAOO,mBAAoBL,CAAI,EAI7DlB,GACFA,EAAAwB,qBAAAN,CAAA,EAEAG,EAGEA,MAAII,WAAYP,EAAAQ,WAGdR,EAAKS,iBACVN,EAAAI,QAAA,IADCP,EAKEU,KAAAP,CAAA,CAJJ,EAEAH,EAKEW,GAAA,QAAA,SAAAR,GACA,IAoBQS,EApBR9B,EAAA+B,iBAAAV,CAAA,IASEA,EAAII,sBACJzB,EAAKgB,gBAAYV,KAAAU,OAAoBK,mBAAUD,CAAcF,EAG7DA,EAAKY,QAAMA,eAEXZ,EAAc,qBAAAc,OAAAC,KAAAC,UAAAb,EAAAI,OAAA,CAAA,CAAA,EAChBJ,EAAAI,QAAAf,WAAAQ,EAAAR,WACAJ,KAAAU,OAAAmB,KAAA,mBAAAd,EAAAH,EAAAE,aAAAF,EAAAkB,aAAA,IAGQN,EAACN,IAAAA,MAAAA,oCAA0B,EACrCN,EAAAY,MAAAA,EAAAT,CAAA,EAGElB,EAAMC,KAAAA,CAAAA,GAPR,CAAC,EAEIc,EAAKP,sBACRX,EAASwB,qBAAqBN,CAAI,EAEtC,CAEmE,CACrE","file":"../modbus-flex-connector.js","sourcesContent":["/**\n Copyright (c) since the year 2017 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n/**\n * Modbus flexible Getter node.\n * @module NodeRedModbusFlexGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:flex:connector')\n\n  function ModbusFlexConnector (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.maxReconnectsPerMinute = config.maxReconnectsPerMinute || 4\n    this.emptyQueue = config.emptyQueue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connection = null\n\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n    this.server = RED.nodes.getNode(config.server)\n    const node = this\n    mbBasics.setNodeStatusTo('waiting', node)\n    if (!this.server) {\n      return\n    }\n    this.server.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, this.server)\n\n    node.onConfigDone = function (msg) {\n      const shouldShowStatus = node.showStatusActivities\n      if (shouldShowStatus) {\n        mbBasics.setNodeStatusTo('config done', node)\n      }\n      if (shouldShowStatus) {\n        mbBasics.setNodeStatusTo(this.server.actualServiceState, node)\n      }\n\n      if (!shouldShowStatus) {\n        mbBasics.setNodeDefaultStatus(node)\n      }\n\n      msg.error.nodeStatus = node.statusText\n\n      if (node.emptyMsgOnFail) {\n        msg.payload = ''\n      }\n\n      node.send(msg)\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      // if (!this.server) {\n      //   return\n      // }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(this.server.actualServiceState, node)\n      }\n\n      if (msg.payload.connectorType) {\n        internalDebugLog(`dynamicReconnect: ${JSON.stringify(msg.payload)}`)\n        msg.payload.emptyQueue = node.emptyQueue\n        this.server.emit('dynamicReconnect', msg, node.onConfigDone, node.onConfigError)\n      } else {\n        const error = new Error('Payload Not Valid - Connector Type')\n        node.error(error, msg)\n\n        node.send(msg)\n      }\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-connector', ModbusFlexConnector)\n}\n"]}