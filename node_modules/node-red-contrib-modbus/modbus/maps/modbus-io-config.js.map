{"version":3,"sources":["modbus-io-config.js"],"names":["module","exports","RED","install","coreIO","require","nodes","registerType","config","setMaxListeners","UNLIMITED_LISTENERS","this","name","path","format","addressOffset","node","lineReader","removeAllListeners","on","err","configData","push","line","internalDebug","lastUpdatedAt","Date","now","emit","warn","allValueNamesFromIOFile","setLineReaderEvents","watcher","existsSync","LineByLineReader","curr","prev","mtime","concat","unwatchFile","done","fs","stop"],"mappings":"AAOAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,uBAAA,EAmFZH,EAAII,MAAMC,aAAa,mBAlFvBF,SAA6BG,GAC7B,IAAMJ,EAASC,QAAQ,UAAA,EAchBI,GAVLP,EAAMQ,MAAAA,WAAAA,KAAuBF,CAAA,EAI7BG,KAAKC,KAAOJ,EAAOI,KACnBD,KAAKE,KAAOL,EAAOK,KACnBF,KAAKG,OAASN,EAAOM,OACrBH,KAAKI,cAAgBP,EAAOO,cAGvBN,MAcL,SAIIL,IACFY,EAAEC,WAAAC,mBAAA,EAFFF,EAKEC,WAAUE,GAAA,QAAA,SAAAC,GAJVhB,EAKOiB,cAAWC,EAAKC,OAAK,CAJ9B,CAAC,EAQDP,EAAKC,WAAWE,GAAG,OAAO,SAAAI,GACpBA,GACJnB,EAAOoB,WAAAA,KAAcD,CAAA,CAJvB,CAAC,EAEDP,EAMIH,WAAWA,GAAAA,MAAAA,WACbG,EAAES,cAAAC,KAAAC,IAAA,EACFX,EAAKY,cAAK,0BAAiCZ,EAAAH,IAAA,EAC3CG,EAAAa,KAAA,CAEFzB,QAAOoB,EAAaM,wBAACd,CAAA,EACvBJ,KAAA,kCAEAmB,KAAAA,EAAAA,IAEI,CAACC,EACH5B,EAAOoB,KAAAA,gBAAaR,EAAAK,UAAA,CACpBjB,CAAAA,EAPAA,EAUEA,cAAOoB,+BAA4CR,EAAAH,IAAA,CATvD,CAtCAG,EAAKS,gBAbsBjB,CAaF,EAAzBQ,EAAKS,cAAgB,KAInBrB,EAAM6B,WAACT,EAAcX,IAAA,GAOvBG,EAAKK,WAAa,IAAEjB,EAAA8B,iBAAAlB,EAAAH,IAAA,EAEpBT,EAAAoB,cAASO,gBAAuBf,EAAAH,IAAA,EAFhCG,EAGEA,WAAgBE,GA0BlBa,EAUoBb,EARpBF,EAUIe,QAAAA,EAAAA,UAAqBf,EAAAH,KAAA,SAAAsB,EAAAC,GATvBhC,EAUEA,cAAOoB,yBAAAA,OAAcW,EAAAE,KAAgC,CAAGrB,EAC1DZ,EAAAoB,cAAA,2BAAAc,OAAAF,EAAAC,KAAA,CAAA,EAGGlB,EAAGkB,QAASD,EAAAC,QACbjC,EAACmC,cAAiB1B,kBAAKG,EAAAH,IAAA,EACzBG,EAAKgB,WAAc,GACnBhB,OAAKC,EAAAA,cACLD,EAAKE,WAAAA,mBAAoB,EACzBsB,EAAMvB,WAAA,IAAAb,EAAA8B,iBAAAlB,EAAAH,IAAA,EACNkB,EAAA,EACJ3B,EAAAoB,cAAA,iCAAAR,EAAAH,IAAA,EAGD,CAAA,EAVGG,EAAKG,GAAG,QAAS,SAAUqB,GACzBC,EAAGF,YAAYvB,EAAKH,IAAI,EACxBG,EAAKgB,QAAQU,KAAK,EAClB1B,EAAKC,WAAWC,mBAAmB,EACnCF,EAAKE,mBAAmB,EACxBsB,EAAK,CACP,CAAC,IA1DCxB,EAAKa,cAAK,qBAAkCb,EAAKH,IAAC,EAClDG,EAAAa,KAAA,4BAAAb,EAAAH,IAAA,EA0DJ,CAE6D,CAC/D","file":"../modbus-io-config.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus\n node-red-contrib-modbusio\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const coreIO = require('./core/modbus-io-core')\n\n  function ModbusIOConfigNode (config) {\n    const fs = require('fs-extra')\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.path = config.path\n    this.format = config.format\n    this.addressOffset = config.addressOffset\n\n    const node = this\n    node.setMaxListeners(UNLIMITED_LISTENERS)\n    node.lastUpdatedAt = null\n\n    /* istanbul ignore next */\n    if (!fs.existsSync(node.path)) {\n      coreIO.internalDebug('IO File Not Found ' + node.path)\n      node.warn('Modbus IO File Not Found ' + node.path)\n      return\n    }\n\n    node.lineReader = new coreIO.LineByLineReader(node.path)\n    coreIO.internalDebug('Read IO File ' + node.path)\n    node.configData = []\n\n    function setLineReaderEvents () {\n      node.lineReader.removeAllListeners()\n\n      node.lineReader.on('error', function (err) {\n        coreIO.internalDebug(err.message)\n      })\n\n      node.lineReader.on('line', function (line) {\n        if (line) {\n          node.configData.push(line)\n        }\n      })\n\n      node.lineReader.on('end', function () {\n        node.lastUpdatedAt = Date.now()\n        coreIO.internalDebug('Read IO Done From File ' + node.path)\n        node.warn({\n          payload: coreIO.allValueNamesFromIOFile(node),\n          name: 'Modbus Value Names From IO File',\n          path: node.path\n        })\n        node.emit('updatedConfig', node.configData)\n      })\n\n      coreIO.internalDebug('Loading IO File Started For ' + node.path)\n    }\n\n    setLineReaderEvents()\n\n    node.watcher = fs.watchFile(node.path, (curr, prev) => {\n      coreIO.internalDebug(`the current mtime is: ${curr.mtime}`)\n      coreIO.internalDebug(`the previous mtime was: ${prev.mtime}`)\n\n      if (curr.mtime !== prev.mtime) {\n        coreIO.internalDebug('Reload IO File ' + node.path)\n        node.configData = []\n        delete node.lastUpdatedAt\n        node.lineReader.removeAllListeners()\n        node.lineReader = new coreIO.LineByLineReader(node.path)\n        setLineReaderEvents()\n        coreIO.internalDebug('Reloading IO File Started For ' + node.path)\n      }\n    })\n\n    node.on('close', function (done) {\n      fs.unwatchFile(node.path)\n      node.watcher.stop()\n      node.lineReader.removeAllListeners()\n      node.removeAllListeners()\n      done()\n    })\n  }\n\n  RED.nodes.registerType('modbus-io-config', ModbusIOConfigNode)\n}\n"]}